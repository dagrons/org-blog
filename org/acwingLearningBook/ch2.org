链表： 毕竟我只是个无序集合
二叉树：巧了，我是有序集合
Trie：我是用来存字符串的集合
合：我们都是常见集合

并查集：我是个five， 我只能查询元素集合和合并集合 
栈：大家好，我是栈, 我有个兄弟叫单调栈，涉及我和我兄弟的题目总能和"最近"扯上关系
单调栈：我是楼上兄弟
队列：大家好，我是队列，我有个兄弟叫单调队列，还有个兄弟叫优先队列
单调队列：我是楼上兄弟
优先队列：谁tm和你是兄弟，我叫堆
合： 我们都是功能性结构

字符串哈希：我是个字符串的预处理结构
KMP：我是个字符串的预处理结构

* 链表, 实现单链表
  :PROPERTIES:
  :CUSTOM_ID: list
  :END:

  单链表在正常情况下没有什么研究空间, 一般而言, 只是作为集合存在, 因为它的插入和遍历比较方便, 所以常作为集合存储元素, 其次, 也难免会碰到模拟题, 就是要模拟链表操作的情况

  下面是一个数组实现

  #+BEGIN_SRC go
	package main

	import "fmt"

	const N = 100010;

	var head = 0
	var ne = make([]int, N)
	var e = make([]int, N)
	var idx = 0

	func Add(val int) {
		e[idx] = val
		ne[idx] = head
		head = idx
		idx++
	}

	func Remove(val int) {
		if e[head] == val {
			head = ne[head]
			return 
		}
		for p, q:=head, ne[head]; q!=0; p, q=ne[p], ne[q] {
			if e[q] == val {
				ne[p] = ne[q]
				return 
			}
		}
	}

	func main() {
		Add(3)
		Add(4)
		Add(1)
		Remove(3)
		Remove(4)
		Add(2)
		for i:=head; i!=0; i = ne[i] {
			fmt.Println(e[i])
		}
	}
  #+END_SRC

  #+RESULTS:
  : 2
  : 1

  下面是一个链表实现, 链式结构, 和数组实现逻辑是差不多的, 不过想对于数组实现，少了个dummy node

  #+BEGIN_SRC go 
	package main

	import "fmt"

	type ListNode struct {
		val interface{}
		next *ListNode
	}

	type List struct {
		head *ListNode
	}

	func New() List {
		return List{nil}
	}

	func (L *List) Insert(val interface{}) { // 插入值为val的节点
		if L.head == nil {
			L.head = &ListNode{val, nil}
			return 
		}
		t := &ListNode{val, nil}
		t.next = L.head
		L.head = t
	}

	func (L *List) Remove(val interface{}) { //  删除值为val的节点
		dummy := &ListNode{0, L.head} // 在链表双指针的情况下,一般都是通过dummy trick来减少逻辑判断
		for p, q := dummy, L.head; q != nil; p, q = p.next, q.next {
			if q.val == val {
				p.next = q.next
				q.next = nil
			}		
		}
	}

	func (L *List) Find(val interface{}) bool {
		for i:=L.head; i!=nil; i=i.next {
			if i.val == val {
				return true
			}		
		}
		return false
	}

	func (L *List) Empty() bool {
		return L.head == nil
	}

	func main() {
		li := New()
		li.Insert(3)
		li.Insert(4)
		li.Insert(1)
		li.Remove(3)
		li.Remove(4)
		li.Insert(2)
		for i := li.head; i!=nil; i=i.next {
			fmt.Println(i.val)
		}
	}
  #+END_SRC

  #+RESULTS:
  : 2
  : 1
  
* 链表, 双头链表实现Deque

  双头链表没有具体的考点, 但双头链表可以用来实现Deque, 下面是一个Deque的链式结构实现

  #+BEGIN_SRC go 
	package main

	import "fmt"
	import "errors"

	type ListNode struct {
		val interface{}	
		prev *ListNode
		next *ListNode
	}

	type Deque struct {
		head *ListNode
		tail *ListNode
	}

	func New() Deque{
		return Deque{nil, nil}
	}

	func (L *Deque) PushFront(val interface{}) {
		if L.head == nil {
			t := &ListNode{val, nil, nil}
			L.head, L.tail = t, t
			return 
		}
		t := &ListNode{val, nil, nil}
		t.next = L.head
		L.head.prev = t.next
		L.head = t	
	}

	func (L *Deque)PushBack(val interface{}) {
		if L.head == nil {
			t := &ListNode{val, nil, nil}
			L.head, L.tail = t, t
			return 
		}
		t := &ListNode{val, nil, nil}
		t.prev = L.tail
		L.tail.next = t
		L.tail = t
	}

	func (L *Deque)PopFront() error {
		if L.head == nil {
			return errors.New("Empty List")		
		}
		if L.head == L.tail {
			L.head, L.tail = nil, nil
			return nil
		}	
		L.head.next.prev = nil
		L.head = L.head.next
		return nil
	}

	func (L *Deque)PopBack() error {
		if L.head == nil {
			return errors.New("Empty List")		
		}
		if L.head == L.tail {
			L.head, L.tail = nil, nil
			return nil
		}
		L.tail.prev.next = nil
		L.tail = L.tail.prev
		return nil
	}

	func (L *Deque)Front() (interface{}, error) {
		if L.head == nil {
			return -1, errors.New("Empty List")
		}
		return L.head.val, nil
	}

	func (L *Deque)Back() (interface{}, error) {
		if L.head == nil {
			return -1, errors.New("Empty List")
		}
		return L.tail.val, nil
	}

	func (L *Deque)Empty() bool {
		return L.head == nil
	}

	func main() {
		q := New()
		q.PushFront(1)
		q.PushFront(2)
		q.PushBack(3)
		q.PushBack(4)
		fmt.Println(q.Front())
		q.PopFront()
		fmt.Println(q.Front())
		q.PopBack()
		fmt.Println(q.Back())	
		q.PopFront()
		fmt.Println(q.Front())
		q.PopBack()
		fmt.Println(q.Back())
	}

  #+END_SRC

  #+RESULTS:
  : 2 <nil>
  : 1 <nil>
  : 3 <nil>
  : 3 <nil>
  : -1 Empty List         
* 二叉树, 模拟插入和删除
  :PROPERTIES:
  :CUSTOM_ID: binary-tree
  :END:
   

  二叉树是典型的有序集合, 虽然二叉树本身应用不多, 但它的变种红黑树,b树,b+树等是存储中常用的结构

  二叉树的实现主要重点是Remove操作, 需要谨慎处理Double Pointer的问题, 要注意*和.运算符的优先级
  
  #+BEGIN_SRC go
	package main

	import "fmt"

	type TreeNode struct {
		val int 
		left, right *TreeNode
	}

	type Tree struct {
		root *TreeNode
	}

	type do func(int)

	func New() Tree {
		return Tree{nil}
	}

	func (T *Tree)Add(val int) { 
		if T.root == nil {
			T.root = &TreeNode{val, nil, nil}
			return 
		}
		p := T.root
		for p!=nil {
			if val == p.val { // 前三种情况是不用再向下遍历, 后两种是继续遍历
				return 
			} else if val < p.val  && p.left == nil {
				p.left = &TreeNode{val, nil, nil}
				return 
			} else if val > p.val && p.right == nil {
				p.right = &TreeNode{val, nil, nil}			
				return
			} else if val < p.val {
				p = p.left
			} else {
				p = p.right
			}
		}
	}

	func (T *Tree) Remove(val int) {
		del(&T.root, val)
	}

	func del(root **TreeNode, val int) {
		if (*root) == nil {
			return
		}
		if (*root).val == val { // 不用再向下遍历
			if (*root).left != nil && (*root).right == nil {
				(*root) = (*root).left
			} else if (*root).right != nil && (*root).left == nil {
				(*root) = (*root).right
			} else if (*root).left != nil && (*root).right != nil {
				p := (*root).right
				for p.left != nil {
					p = p.left
				}
				p.left = (*root).left
				(*root) = (*root).right
			} else {
				(*root) = nil
			}	
		} else { // 继续向下遍历
			if val < (*root).val {
				del(&((*root).left), val)
			} else {
				del(&((*root).right), val)
			}		
		}
	}

	func (T *Tree) InOrder(f do) {
		inorder(T.root, f)
	}

	func inorder(root *TreeNode, f do) {
		if root == nil {
			return 
		}
		inorder(root.left, f)
		f(root.val)
		inorder(root.right, f)
	}

	func (T *Tree) PreOrder(f do) {
		preorder(T.root, f)
	}

	func preorder(root *TreeNode, f do) {
		if root == nil {
			return
		}
		f(root.val)
		preorder(root.left, f)
		preorder(root.right, f)
	}

	func (T *Tree) PostOrder(f do) {
		postorder(T.root, f)
	}

	func postorder(root *TreeNode, f do) {
		if root == nil {
			return 
		}
		postorder(root.left, f)
		postorder(root.right, f)
		f(root.val)
	}

	func main() {
		tr := New()
		tr.Add(5)
		tr.Add(2)
		tr.Add(1)
		tr.Add(3)
		tr.Add(4)
		tr.Add(7)
		tr.Add(5)
		tr.Add(6)
		tr.Add(9)
		tr.Add(8)
		tr.Add(10)
		tr.InOrder(func(x int) { // Inorder能按从小到大顺序打印出所有节点
			fmt.Println(x)
		})
		fmt.Println()
		tr.PreOrder(func(x int) {
			fmt.Println(x)
		})
		fmt.Println()
		tr.PostOrder(func(x int) {
			fmt.Println(x)
		})
		fmt.Println()
		tr.Remove(1)
		tr.Remove(7)
		tr.Remove(8)
		tr.PostOrder(func (x int) {
			fmt.Println(x)
		})
	}
  #+END_SRC

  #+RESULTS:
  #+begin_example
  1
  2
  3
  4
  5
  6
  7
  8
  9
  10

  5
  2
  1
  3
  4
  7
  6
  9
  8
  10

  1
  4
  3
  2
  6
  8
  10
  9
  7
  5

  4
  3
  2
  6
  10
  9
  5
  #+end_example
  
* Trie, 统计字符串  
  :PROPERTIES:
  :CUSTOM_ID: trie
  :END:

  Trie是一个用于统计字符串的结构, 常作为统计字符串的集合使用

  下面是数组实现
  
  #+BEGIN_SRC go
	package main

	import "fmt"

	const N = 100010

	var son = make([][26]int, N)
	var cnt = make([]int, N)
	var idx = 1

	func Add(s string) {
		p := 0
		for _, ch := range s {
			c := ch - 'a'
			if son[p][c] == 0 {
				son[p][c] = idx
				idx++
			}
			p = son[p][c]			
		}
		cnt[p] += 1
	}

	func Find(s string) int {
		p := 0
		for _, ch := range s {
			c := ch - 'a'
			if son[p][c] == 0 {
				return 0			
			}
			p = son[p][c]
		}
		return cnt[p]
	}

	func main() {
		Add("abc")
		Add("abc")
		Add("abcd")
		fmt.Println(Find("abc"))
		fmt.Println(Find("abcd"))
	}
  #+END_SRC

  #+RESULTS:
  : 2
  : 1

  下面是链式实现

  #+BEGIN_SRC go
	package main

	import "fmt"

	type TrieNode struct {
		son [26]*TrieNode
		cnt int
	}

	type Trie struct {
		root *TrieNode
	}

	func New() Trie {
		return Trie{&TrieNode{}}
	}

	func (T *Trie) Add(s string) {
		p := T.root
		for _, ch := range s {
			c := ch - 'a'
			if p.son[c] == nil {			
				p.son[c] = &TrieNode{}
			}
			p = p.son[c]
		}
		p.cnt += 1
	}

	func (T *Trie) Remove(s string) {
		p := T.root
		for _, ch := range s {
			c := ch - 'a'
			if p.son[c] == nil {
				return 
			}
			p = p.son[c]
		}
		p.cnt -= 1
	}

	func (T *Trie) Count(s string) int {
		p := T.root
		for _, ch := range s {
			c := ch - 'a'
			if p.son[c] == nil {
				return 0
			}
			p = p.son[c]
		}
		return p.cnt
	}

	func main() {
		tr := New()
		tr.Add("abc")
		tr.Add("acb")
		tr.Add("abcd")
		tr.Add("acdb")
		tr.Add("abc")
		fmt.Println(tr.Count("abc"))
		tr.Remove("abc")
		fmt.Println(tr.Count("abc"))
		tr.Add("acdb")
		fmt.Println(tr.Count("acdb"))
	}
  #+END_SRC

  #+RESULTS:
  : 2
  : 1
  : 2
    
* 并查集，模拟并查集
  :PROPERTIES:
  :CUSTOM_ID: union-set
  :END:

  并查集常用于询问一个元素是否在当前集合中，并且支持集合合并操作

  #+BEGIN_SRC go
	package main

	import "fmt"

	const N = 100010

	var p = make([]int, N)

	func Find(t int) int {
		for t != p[t] {
			t = p[t]
		}
		return t
	}

	func Union(a, b int) {
		pa := Find(a)
		pb := Find(b)
		p[pb] = pa
	}

	func main() {
		for i:= 0; i < 10; i++ {
			p[i] = i
		}
		Union(1, 2)
		Union(2, 4)
		Union(5, 7)
		Union(7, 8)
		Union(5, 6)
		fmt.Println(Find(1) == Find(4))
		fmt.Println(Find(2) == Find(4))
		fmt.Println(Find(2) == Find(5))
		fmt.Println(Find(7) == Find(9))
	}

  #+END_SRC

  #+RESULTS:
  : true
  : true
  : false
  : false
    
* 栈，模拟栈

  栈的实现十分简单， 但应用十分广泛

  常用于表达式求值等问题

  在golang中， 我们可以用slice来代替栈和队列

  #+BEGIN_SRC go
	package main

	import "fmt"

	const N = 100010

	func main() {
		stk := make([]int, 0, N)
		stk = append(stk, 5) // push
		fmt.Println(stk[len(stk)-1]) // top
		stk = append(stk, 6)
		stk = stk[:len(stk)-1]  // pop
		fmt.Println(stk[len(stk)-1])
		stk = stk[:len(stk)-1]
		fmt.Println(len(stk) <= 0) // empty
		stk = append(stk, 4)
		fmt.Println(stk[len(stk)-1])
		fmt.Println(len(stk) <= 0)
	}


  #+END_SRC

  #+RESULTS:
  : 5
  : 5
  : true
  : 4
  : false
* 栈，括号匹配   
  :PROPERTIES:
  :CUSTOM_ID: stack

   
  重点是“最近”，最近的左右括号之间可以相互抵消，和栈的性质刚好相似

  每次enstack的时候元素如果是"("，而top元素是")"，则当前元素不再入队，且top元素destack，否则，正常enstack
  
  #+BEGIN_SRC go
	package main

	import "fmt"

	type Stack []int

	func (S *Stack) Push(val int) {
		,*S = append(*S, val)
	}

	func (S *Stack) Pop() {
		,*S = (*S)[:len(*S)-1]
	}

	func (S Stack) Top() int {
		return S[len(S)-1]
	}

	func (S Stack) Len() int {
		return len(S)
	}

	func main() {
		s := []byte("((()()(((())))))")
		stk := Stack{}
		for _, x := range s {
			if stk.Len() > 0 && stk.Top() == '(' && x == ')' {
				stk.Pop()
			} else {
				stk.Push(int(x))			
			}
		}
		fmt.Println(stk.Len() == 0)
	}
  #+END_SRC

  #+RESULTS:
  : true

* 栈，最长匹配括号
  :PROPERTIES:
  :CUSTOM_ID: pin
  :END:

  #+BEGIN_SRC conf :tangle in.txt
	)(())()))
  #+END_SRC 
  
  #+BEGIN_SRC go
	package main

	import "fmt"
	import "os"

	type Stack []interface{}

	func (S *Stack) Push(val interface{}) {
		,*S = append(*S, val)
	}

	func (S *Stack) Pop() {
		,*S = (*S)[:len(*S)-1]
	}

	func (S Stack) Top() interface{} {
		return S[len(S)-1]
	}

	func (S Stack) Len() int {
		return len(S)
	}

	func pin(x rune) {
		fmt.Println(string(x))
	}

	func main() {
		fd, err := os.Open("/home/dell/acwingLearningBook/in.txt")
		if err != nil {
			panic(err)		
		}
		defer fd.Close()
		os.Stdin = fd

		var ss string
		fmt.Scan(&ss)
		s := []rune(ss)
		n := len(s)
		stk := Stack{}
		var ans int = 0
		for i:=0; i < n; i++ { // loop invariant: 每次新元素入栈前，栈中不存在连续数字和未被消去的括号
			if s[i] == '(' {
				pin('a')
				stk.Push(s[i])
			} else { // s[i] == ')' 只有这种情况才可能消去括号		
				if stk.Len() == 0 {
					pin('b')
					stk.Push(rune(s[i]))
				} else if stk.Top() == '(' {
					pin('c')
					stk.Pop()
					var t = 1
					for stk.Len() > 0 && stk.Top() != '(' && stk.Top() != ')' {
						t += int(stk.Top().(rune))
						stk.Pop()
					}
					stk.Push(rune(t))
					ans = max(int(ans), int(t))
				} else if stk.Top() == ')' {
					pin('d')
					stk.Push(s[i])
				} else { // stk.Top() is number
					t := stk.Top().(rune)
					stk.Pop()
					if stk.Top() == '(' {
						pin('e')
						stk.Pop()
						t += 1
						ans = max(int(ans), int(t))
						stk.Push(rune(t))
					} else {
						pin('f')
						stk.Push(rune(t))
						stk.Push(s[i])
					}				
				}
			}		
		}	
		fmt.Println(ans*2)
	}

	func max(a, b int) int {
		if a > b {
			return a
		} else {
			return b
		}
	}
  #+END_SRC

  #+RESULTS:
  #+begin_example
  b
  a
  a
  c
  e
  a
  c
  f
  d
  6
  #+end_example
  
* 单调栈，单调栈

  给定N个数，输出左边比它小的第一个数

  我们希望enstack时，当前top元素一定是离当前元素最近的小于它的元素（loop invariant)

  当我们enstack时，先把所有大于当前元素的元素destack（ways to ensure loop invariant)

  #+BEGIN_SRC go 
	package main

	import "fmt"

	type Stack []int

	func (S *Stack) Push(val int) {
		,*S = append(*S, val)
	}

	func (S *Stack) Pop() {
		,*S = (*S)[:len(*S)-1]
	}

	func (S Stack) Top() int {
		return S[len(S)-1]
	}

	func (S Stack) Len() int {
		return len(S)
	}

	func main() {
		s := []int{3, 4, 2, 7, 5}
		n := len(s)
		stk := Stack{}

		for i:=0; i < n; i++ {
			for stk.Len() > 0 && stk.Top() >= s[i] {
				stk.Pop()
			}
			if stk.Len() == 0 {
				fmt.Println(-1)
			} else {
				fmt.Println(stk.Top())
			}
			stk.Push(s[i])
		}
	}
  #+END_SRC

  #+RESULTS:
  : -1
  : 3
  : -1
  : 2
  : 2
* 队列， 模拟队列 

  队列和栈类似，不过是FIFO的结构

  常用场景也比较多， 常用在bfs遍历时

  #+BEGIN_SRC go
	package main

	import "fmt"

	const N = 100010

	func main() {
		q := make([]int, 0, N)
		q = append(q, 6) // push
		fmt.Println(len(q) <= 0) // empty
		fmt.Println(q[0]) // query
		q = q[1:] // pop
		fmt.Println(len(q) <= 0)
		q = append(q, 3)
		q = append(q, 4)
		q = q[1:]
		fmt.Println(q[0])
		q = append(q, 6)
	}
  #+END_SRC

  #+RESULTS:
  : false
  : 6
  : true
  : 4
* 单调队列，滑动窗口
   
  该题要求输出滑动窗口中的最大值

  由于我们只需要滑动窗口的最大值，维护一个单调递减队列，每次加入新元素时，我们从队尾开始，将小于等于该元素的元素全部deque(ways to ensure loop invariant)

  通过上述操作，我们保证了队头元素一定是上一个deque元素和当前enque元素（不包含上一个deque元素）之间的所有元素中的最大值(loop invariant)

  为了满足滑动窗口的窗口大小限制，我们在每一次入队后，判断队头元素位置 - 当前元素的时间位置 + 1， 如果大于窗口大小，我们就deque队头

  s[]: 入队元素的权值

  #+BEGIN_SRC go
	package main

	import "fmt"

	type Queue []int

	func (Q *Queue) Push(val int) {
		,*Q = append(*Q, val)
	}

	func (Q *Queue) PopFront() {
		,*Q = (*Q)[1:]
	}

	func (Q *Queue) PopBack() {
		,*Q = (*Q)[:len(*Q)-1]
	}

	func (Q Queue) Front() int {
		return Q[0]
	}

	func (Q Queue) Back() int {
		return Q[len(Q)-1]
	}

	func (Q Queue) Len() int {
		return len(Q)
	}

	func main() {
		s := []int{1, 3, -1, -3, 5, 3, 6, 7}
		k := 3
		q := Queue{}
		n := len(s)
		for i:=0; i < n; i++ {
			for q.Len() > 0 && s[q.Back()] <= s[i] {
				q.PopBack()
			}
			q.Push(i)
			if i-q.Front()+1 > k {
				q.PopFront()
			}
			if i >= k-1 {
				fmt.Println(s[q.Front()])
			}
		}
	}
  #+END_SRC

  #+RESULTS:
  : 3
  : 3
  : 5
  : 5
  : 6
  : 7
* 堆，堆排序

  #+BEGIN_SRC conf :tangle in.txt
	5 3
	4 5 1 3 2
  #+END_SRC 

  #+BEGIN_SRC go
	package main

	import "os"
	import "fmt"
	import "container/heap"

	type IntHeap []int

	func (H IntHeap) Less(i, j int) bool {
		return H[i] < H[j]
	}

	func (H IntHeap) Len() int {
		return len(H)
	}

	func (H IntHeap) Swap(i, j int) {
		H[i], H[j] = H[j], H[i]
	}

	func (H *IntHeap) Push(x interface{}) {
		,*H = append(*H, x.(int))
	}

	func (H *IntHeap) Pop() interface{} {
		n := len(*H)
		t := (*H)[n-1]
		,*H = (*H)[:n-1]
		return t
	}

	func main() {
		fd, _ := os.Open("/home/dell/blog/org/acwingLearningBook/in.txt")
		os.Stdin = fd

		var n, m int
		fmt.Scan(&n, &m)
		q := IntHeap{}
		for i:=0; i < n; i++ {
			var x int
			fmt.Scan(&x)
			heap.Push(&q, x)
		}
		for i:=0; i < m; i++ {
			fmt.Println(heap.Pop(&q).(int))
		}
	}
  #+END_SRC 

  #+RESULTS:
  : 1
  : 2
  : 3


#+BEGIN_SRC go
  package main

  import "fmt"
  import "os"

  type IntHeap []int

  func NewIntHeap() *IntHeap {
	  return &IntHeap{0}
  }

  func (H IntHeap) down(x int) {
	  n := len(H) - 1
	  t := x
	  if x << 1 <= n && H[t] < H[x<<1] {
		  t = x << 1
	  }
	  if x << 1|1 <= n && H[t] < H[x<<1|1] {
		  t = x << 1|1
	  }
	  if t != x {
		  H[t], H[x] = H[x], H[t]
		  H.down(t)
	  }
  }

  func (H IntHeap) up(x int) {
	  t := x >> 1
	  if t > 0 && H[x] > H[t] {
		  H[t], H[x] = H[x], H[t]
		  H.up(t)
	  }	
  }

  func (H *IntHeap) Push(val int) {
	  ,*H = append(*H, val)
	  H.up(len(*H)-1)
  }

  func (H *IntHeap) Pop() {
	  (*H)[1], (*H)[len(*H)-1] = (*H)[len(*H)-1], (*H)[1]
	  ,*H = (*H)[0:len(*H)-1]
	  H.down(1)
  }

  func (H IntHeap) Top() int {
	  return H[1]
  }

  func main() {
	  fd, _ := os.Open("/home/dell/blog/org/acwingLearningBook/in.txt")
	  os.Stdin = fd

	  var n, m int
	  fmt.Scan(&n, &m)
	  q := NewIntHeap()
	  for i:=0; i < n; i++ {
		  var x int
		  fmt.Scan(&x)
		  q.Push(x)
	  }
	  for i:=0; i < m; i++ {
		  fmt.Println(q.Top())
		  q.Pop()
	  }
  }
#+END_SRC

#+RESULTS:
: 5
: 4
: 3

* 字符串哈希， 字符串哈希
  :PROPERTIES:
  :CUSTOM_ID: string-hash
  :END:
  
  字符串哈希，是一种针对字符串的预处理操作，可以在O(1)时间内判断两个子串是否相等

  #+BEGIN_SRC go
	package main

	import "fmt"

	const P = 113

	func main() {
		s := []byte("0aabbaabb")
		n := len(s)
		h := make([]int, n)
		p := make([]int, n)

		h[1] = int(s[1])
		p[1] = P 
		for i:=2; i < n; i++ {
			h[i] = h[i-1]*P + int(s[i])
			p[i] = p[i-1]*P
		}

		query := func(l1, r1, l2, r2 int) bool {
			return h[r1]-h[l1-1]*p[r1-l1+1] == h[r2]-h[l2-1]*p[r2-l2+1]
		}

		fmt.Println(query(1, 3, 5, 7))
		fmt.Println(query(1, 3, 6, 8))
		fmt.Println(query(1, 2, 1, 2))
	}


  #+END_SRC

  #+RESULTS:
  : true
  : false
  : true
* KMP，KMP字符串
  :PROPERTIES:
  :CUSTOM_ID: kmp
  :END:

  KMP，核心是next数组，存储失配指针，记录了当我们在模式串p的位置j失配时，下一步应该从何处开始匹配   
   
  #+BEGIN_SRC go
	package main

	import "fmt"

	func main() {
		s := []byte("0ababaab")
		p := []byte("0abaa")
		m := len(p)
		ne := make([]int, m)
		build(p, ne)
		fmt.Println(match(s, p, ne))
	}

	func build(p []byte, ne []int) { 	
		m:=len(p)

		j := 0
		for i:=2; i < m; i++ {
			for j>0 && p[i] != p[j+1] {
				j = ne[j]
			}
			if p[i] == p[j+1] {
				j++
			}
			ne[i] = j
		}
	}


	func match(s, p []byte, ne []int) int {
		n:=len(s)
		m:=len(p)

		j:=0
		for i:=1; i<n; i++ {
			for j>0 && s[i]!=p[j+1] {
				j = ne[j]
			}
			if s[i] == p[j+1] {
				j++			
			}
			if j == m-1 {
				fmt.Println(i-m+1)
				j = ne[j]
			}
		}
		return 0
	}
  #+END_SRC   

  #+RESULTS:
  : 2
  : 0
     
