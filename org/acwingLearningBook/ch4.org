动态规划是典型的思维分析题，代码量小，思维量大，代码方面主要注意收敛方向和边界即可
  
* 背包问题  
   
  v[]: 每个物品的体积
  e[]: 每个物品的价值

  f[][]: 从前i个物品中选，体积不超过j，能的到的最大价值
   
  f[0][0] = 0   
  f[i][j] = max(f[i-1][j], f[i-1][j-v[i]] + e[i])
   
  每个状态依赖左上方状态

  #+BEGIN_SRC conf :tangle in.txt
	4 5
	1 2
	2 4
	3 4
	4 5
  #+END_SRC

  #+BEGIN_SRC go 
	package main

	import "fmt"
	import "os"

	func main() {
		fd, err := os.Open("/home/dell/acwingLearningBook/in.txt")
		if err != nil {
			panic(err)
		}
		defer fd.Close()	
		oldStdin := os.Stdin
		defer func() {
			os.Stdin = oldStdin
		}()
		os.Stdin = fd	

		var n, m int
		fmt.Scan(&n, &m)	
		f := make([][]int, n+1)
		for i:=0; i <= n; i++ {
			f[i] = make([]int, m+1)
		}
		for i:=1; i <= n; i++ {
			var v, e int
			fmt.Scan(&v, &e)
			for j:=1; j <= m; j++ {
				f[i][j] = f[i-1][j]
				if j >= v {
					f[i][j] = max(f[i][j], f[i-1][j-v]+e)
				}
			}
		}
		fmt.Println(f[n][m])
	}

	func max(a, b int) int {
		if a > b {
			return a
		} else {
			return b
		}
	}
  #+END_SRC

  #+RESULTS:
  : 8
  
* 最长上升子序列

  f[]: 以s[i]结尾的最长上升子序列
   
  f[i] = max(f[k] + 1) for s[k] < s[i]

  #+BEGIN_SRC conf :tangle in.txt
	7
	3 1 2 1 8 5 6
  #+END_SRC

  #+BEGIN_SRC go
	package main

	import "fmt"
	import "os"

	func main() {
		fd, err := os.Open("/home/dell/acwingLearningBook/in.txt")
		if err != nil {
			panic(err)
		}
		defer fd.Close()
		os.Stdin = fd

		var n int
		fmt.Scan(&n)
		s := make([]int, n)
		for i:= 0; i < n; i++ {
			fmt.Scan(&s[i])
		}
		f := make([]int, n)
		ans := 0
		for i:=0; i < n; i++ {
			for j:=0; j < i; j++ {
				if s[j] < s[i] {
					f[i] = max(f[i], f[j]+1)
				}
			}
			ans = max(ans, f[i])
		}

		fmt.Println(ans+1)
	}

	func max(a, b int) int {
		if a > b {
			return a
		} else {
			return b
		}
	}
  #+END_SRC

  #+RESULTS:
  : 4
   

   
   

