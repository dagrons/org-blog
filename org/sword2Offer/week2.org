* 机器人的运动范围

  先写一个flood-fill的解法

  注意几点: 
  1. 用st[PII{x, y}]代替st[][]
  2. 如果在递深过程中, 需要observer变量, 就将全局变量放在递深变量的上面
  3. 边界条件可以放在门前守卫, 也可以门后守卫, 即在递深前判断和在入口判断
	 
  
  #+BEGIN_SRC go
	package main

	import "fmt"

	type PII struct {
		first int
		second int 
	}

	func main() {
		fmt.Println(solve(7, 4, 5))
	}


	func solve(k, m, n int) int {
		// 先写一个flood-fill的解法
		st := make(map[PII]struct{})
		ans = 0
		dfs(0, 0, k, m, n, st)
		return ans
	}

	var ans int
	func dfs(x, y, k, m, n int, st map[PII]struct{}) {
		// 在每个状态, 将当前状态标记为已走过, 然后递深
		// 边界条件: 如果递深状态非法, 则不再递深
		dx := []int{1, 0, -1, 0}
		dy := []int{0, 1, 0, -1}
		st[PII{x, y}] = struct{}{}
		ans ++
		for i:=0; i < 4; i++ {
			nx := x + dx[i]
			ny := y + dy[i]
			if nx < 0 || ny < 0 || nx >= m || ny >= n {
				continue
			}
			if _, ok := st[PII{nx, ny}]; ok {
				continue
			}
			if nx + ny > k {
				continue
			}
			dfs(nx, ny, k, m, n, st)		
		}
	}
  #+END_SRC 

  #+RESULTS:
  : 20

  #+attr_html: :width 720px
  [[./棋盘问题.png]]


  再写一个数学推导的解法
  
  #+BEGIN_SRC go
	package main

	import "fmt"

	func main() {
		fmt.Println(solve(7, 4, 5))
	}

	func solve(k, m, n int) int {
		ans := 0
		x := 1
		for j:=0; j <= k; j++ {
			ans += x
			if j < min(m, n) - 1 {
				x++
			}
			if j >= max(m, n)- 1 {
				x--
			}
		}
		return ans
	}


	func max(a, b int) int {
		if a > b {
			return a 
		} else {
			return b
		}
	}

	func min(a, b int) int {
		if a < b {
			return a
		} else {
			return b
		}
	}
  #+END_SRC

  #+RESULTS:
  : 20
  
* 剪绳子

  没什么好说的, 不是剪成3, 就是2

  #+BEGIN_SRC go
	package main

	import "fmt"

	func main() {
		n := 11
		fmt.Println(solve(n))
	}

	func solve(n int) int {
		res := 1
		quo := n / 3
		rnd := n % 3
		if rnd == 1 {
			quo --
			for quo > 0{
				res *= 3
				quo --
			}
			return res * 2 * 2
		} else if rnd == 2 {
			for quo > 0 {
				res *= 3
				quo --
			}
			return res * 2
		} else {
			for quo > 0 {
				res *= 3
				quo -- 
			}
			return res
		}
	}
  #+END_SRC

  #+RESULTS:
  : 54

* 二进制中1的个数

  lowbit操作: x&-x

  #+BEGIN_SRC go
	package main

	import "fmt"

	func main() {
		n := 6
		fmt.Println(solve(n))
	}

	func solve(n int) int {
		cnt := 0
		for n > 0 {
			n -= n&-n
			cnt ++
		}
		return cnt
	}
  #+END_SRC

  #+RESULTS:
  : 2
* 数值的整数次方

  从数学的角度看:

  a^b可以理解为, a^(1010010) = a10 * a10000 * a1000000

  通过快速幂, 我们先预处理出p_i = a^{2^i}, 其中p_i = p_{i-1}*p_{i-1}
  
  则a^b = \prod p_i * b_i

  直观上, 即[p_0, p_1, p_2, p_3, ...] * [b_0, b_1, b_2, b_3, ...], 前者是数组意义上的向量, 后者是位意义上的向量

  另一个问题是a*b, 也可以这样理解
  p[i] = a, p[i] = p[i-1] * 2
 
  a*b = [p_0, p_1, ... ] * [b_0, b_1, ...]

  总之, 数组是向量, 数字也是向量
  
  #+BEGIN_SRC go
	package main

	import "fmt"

	func main() {
		a, b := 10, 5
		fmt.Println(solve(a, b))
	}

	func solve(a, b int) int {
		// 快速幂就完事了
		// p[i]表示a^i, p[0] = a
		// a^b = p[]*b[], b[]表示b的位数组, 即a^b可以理解为p[]与a[]的点积
		// [a20, a21, a22, a23...] * [b0, b1, b2, ....]
		// p[0] = a^2^0 = a
		res := 1
		p := make([]int, 100)
		p[0] = a
		for i:=0; i < 31; i++ {
			if (b >> i) & 1 == 1{
				res*=p[i]
			}
			p[i+1] = p[i] * p[i]
		}
		return res
	}


  #+END_SRC

  #+RESULTS:
  : 100000
* 在O(1)时间删除链表节点

  看答案, 看答案

  #+BEGIN_SRC go
	package main

	import "fmt"

	type ListNode struct {
		val int
		next *ListNode
	}

	type List struct {
		head *ListNode
	}

	func (L *List)Add(val int) {
		if L.head == nil {
			L.head = &ListNode{val, nil}
		} else {
			newNode := &ListNode{val, L.head}
			L.head = newNode
		}
	}

	func NewList() *List {
		return &List{nil}
	}

	func main() {
		l := NewList()
		l.Add(2)
		l.Add(3)
		l.Add(1)
		l.Add(5)
		l.Add(6)
		l.Add(7)
		solve(l.head.next.next)
		for i := l.head; i != nil; i = i.next {
			fmt.Println(i.val)
		}
	}

	func solve(node *ListNode) {
		t := node.next
		node.val = node.next.val
		node.next = node.next.next
		t.next = nil
	}
  #+END_SRC

  #+RESULTS:
  : 7
  : 6
  : 1
  : 3
  : 2
* 删除链表中重复的节点

  #+BEGIN_EXPORT HTML
  <span style="background-color:yellow">
  在会删除链表头节点的情况下, 可以使用dummy node技巧
  </span>
  #+END_EXPORT 

  不变量啊, 不变量

  #+BEGIN_SRC go
	package main

	import "fmt"

	type ListNode struct {
		val int
		next *ListNode
	}

	type List struct {
		head *ListNode
	}

	func (L *List)Add(val int) {
		if L.head == nil {
			L.head = &ListNode{val, nil}
		} else {
			newNode := &ListNode{val, L.head}
			L.head = newNode
		}
	}

	func NewList() *List {
		return &List{nil}
	}

	func main() {
		L := NewList()
		L.Add(9)
		L.Add(9)
		L.Add(8)
		L.Add(8)
		L.Add(7)
		L.Add(7)
		L.Add(6)
		L.Add(5)
		L.Add(4)
		L.Add(4)
		L.Add(1)
		solve(L.head)
		for i:=L.head; i!=nil; i=i.next {
			fmt.Println(i.val)
		}
	}

	func solve(head *ListNode) {
		// 当我们有可能删除头节点时, 一般使用dummy node技巧
		dummy := &ListNode{-1, head}
		// 每轮迭代开始, 我们让q指向第一个存在重复的节点, 然后p向前移动直到q.next.val == q.val
		// 每轮迭代, p指向第一个重复节点的前一个节点, q指向最后一个节点, 然后p.next = q.next
		// 每轮迭代后, q=p.next
		p := dummy
		q := head
		for q != nil {		
			for q.next != nil && q.val != q.next.val {
				q = q.next
			}
			for p.next != q {
				p = p.next
			}
			for q.next != nil && q.val == q.next.val {
				q = q.next
			}
			p.next = q.next
			q = p.next
		}
	}
  #+END_SRC

  #+RESULTS:
  : 1
  : 5
  : 6
* 表示数值的字符串

  注意一下状态机的写法

  #+BEGIN_EXPORT HTML
  <span style="background-color: yellow">
  对于状态机的问题, 把状态和转移矩阵定义清楚后, 还是比较简单的 

  下面的代码是用的map进行转移的, 其实也可以用矩阵定义转移矩阵来减少代码量
  </span>
  #+END_EXPORT

  |               | 0(number) | 1(dot) | 2(exp) | 3(sign) | 4(space) | 5(ill) |
  |---------------+-----------+--------+--------+---------+----------+--------|
  | 0(ILL)        |           |        |        |         |          |        |
  | 1(START)      |         3 |      4 |        |       2 |        1 |        |
  | 2(INT_SIGN)   |         3 |        |        |         |          |        |
  | 3(INTEGER)    |         3 |      4 |      5 |       7 |        9 |        |
  | 4(DOT)        |         6 |        |        |         |          |        |
  | 5(EXP)        |         8 |        |        |       7 |          |        |
  | 6(DOT_NUMBER) |         6 |        |        |         |        9 |        |
  | 7(EXP_SIGN)   |         8 |        |        |         |          |        |
  | 8(EXP_NUMBER) |         8 |        |        |         |        9 |        |
  | 9(END)        |           |        |        |         |        9 |        |

  ILL状态无论输入是什么都是ILL


  #+BEGIN_SRC go
	package main

	import "fmt"

	func conv(c rune) int {
		switch {
		case '0' <= c && c <= '9':
			return 0
		case c == '.':
			return 1
		case c == 'E' || c == 'e':
			return 2
		case c == '+' || c == '-':
			return 3
		case c == ' ':
			return 4
		default:
			return 5
		}
	}

	func solve(exp string) bool {
		transfer := [][]int{
			{0, 0, 0, 0, 0, 0},
			{3, 4, 0, 2, 1, 0},
			{3, 0, 0, 0, 0, 0},
			{3, 4, 5, 7, 9, 0},
			{6, 0, 0, 0, 0, 0},
			{8, 0, 0, 7, 0, 0},
			{6, 0, 0, 0, 9, 0},
			{8, 0, 0, 0, 0, 0},
			{8, 0, 0, 0, 9, 0},
			{0, 0, 0, 0, 9, 0},
		};
		state := 1
		for _, c := range exp {
			state = transfer[state][conv(c)]
			if state == 0 {
				return false
			}
		}
		if state == 9 {
			return true
		} else {
			return false
		}	
	}

	func main() {
		for _, x := range []string{"+100", "5e2", "-123", "3.1416", "-1E-16", "12e", "1a3.14", "1.2.3", "+--5", "12e+4.3"} {
			fmt.Println(solve(x+" "))		
		}
	}
  #+END_SRC

  #+RESULTS:
  #+begin_example
  true
  true
  true
  true
  true
  false
  false
  false
  false
  false
  #+end_example
 
 
    #+BEGIN_SRC dot :file a.png
	digraph G {
		start[label="START"]
		a[label="INT_SIGN"]
		b[label="INTEGER"]
		c[label="EXP"]
		d[label="DOT"]
		e[label="EXP_SIGN"]
		f[label="DOT_NUMBER"]
		g[label="EXP_NUMBER"]
		end[label="END"]
		start->{a, b, f, start}
		a->b
		b->{b, c, end, d}
		c->{e, g}
		d->f
		e->g
		f->{f, end}
		g->{g, end}
	}
  #+END_SRC

  #+RESULTS:
  [[file:a.png]]


  #+BEGIN_SRC go
	package main

	import "fmt"

	type State int
	type CharType int

	const ( // 定义状态机状态
		STATE_START State = iota
		STATE_INT_SIGN
		STATE_INTEGER
		STATE_DOT
		STATE_EXP
		STATE_DOT_NUMBER
		STATE_EXP_SIGN
		STATE_EXP_NUMBER
		STATE_END
	)

	const ( // 定义输入类型
		SPACE CharType = iota
		NUMBER
		EXP
		DOT
		SIGN
		ILLIGLE
	)

	func toCharType(c rune) CharType{ // 判断输入类型
		switch {
		case c >= '0' && c <= '9':
			return NUMBER
		case c == ' ':
			return SPACE
		case c == 'e' || c == 'E':
			return EXP
		case c == '.':
			return DOT
		case c == '+' || c == '-':
			return SIGN
		default:
			return ILLIGLE
		}
	}

	func solve(exp string) bool {
		// transfer: 状态转移矩阵
		transfer := map[State]map[CharType]State {
			STATE_START: map[CharType]State {SPACE: STATE_START,
				SIGN: STATE_INT_SIGN,
				DOT: STATE_DOT,
				NUMBER: STATE_INTEGER},
				STATE_INT_SIGN: map[CharType]State {NUMBER: STATE_INTEGER},
				STATE_INTEGER: map[CharType]State {DOT: STATE_DOT,
					EXP: STATE_EXP,
					NUMBER: STATE_INTEGER,
					SPACE: STATE_END,
				},
				STATE_DOT: map[CharType]State {NUMBER: STATE_DOT_NUMBER},
				STATE_EXP: map[CharType]State {SIGN: STATE_EXP_SIGN, NUMBER: STATE_EXP_NUMBER},
				STATE_DOT_NUMBER: map[CharType]State {NUMBER: STATE_DOT_NUMBER,
					SPACE: STATE_END,
				},
				STATE_EXP_SIGN: map[CharType]State {NUMBER: STATE_EXP_NUMBER,},
				STATE_EXP_NUMBER: map[CharType]State {NUMBER: STATE_EXP_NUMBER,
					SPACE: STATE_END,
				},
			}
		state := STATE_START
		for _, c := range exp {
			next_state, ok := transfer[state][toCharType(c)]
			if ok {
				state = next_state
			} else {
				return false
			}		
		}
		if state == STATE_END {
			return true
		}
		return false
	}

	func main() {
		for _, x := range []string{"+100", "5e2", "-123", "3.1416", "-1E-16", "12e", "1a3.14", "1.2.3", "+--5", "12e+4.3"} {
			fmt.Println(solve(x+" "))		
		}
	}
  #+END_SRC

  #+RESULTS:
  #+begin_example
  true
  true
  true
  true
  true
  false
  false
  false
  false
  false
  #+end_example

* 调整数组顺序使奇数位于偶数前面

  #+BEGIN_SRC go
	package main

	import "fmt"

	func main() {
		a := []int{1, 2, 3, 4, 5}
		fmt.Println(solve(a))
	}

	func solve(a []int) []int {
		l, r := 0, len(a)-1
		i, j := l, r
		for i < j {
			for a[i] % 2 != 0 {
				i++
			}
			for a[j] % 2 != 1 {
				j--
			}
			if i < j {
				a[i], a[j] = a[j], a[i]
			}
		}
		return a
	}
  #+END_SRC

  #+RESULTS:
  : [1 5 3 4 2]
* 链表中倒数第k个节点

  #+BEGIN_SRC go
	package main

	import "fmt"

	type ListNode struct {
		val int
		next *ListNode
	}

	type List struct {
		head *ListNode
	}

	func (L *List)Add(val int) {
		if L.head == nil {
			L.head = &ListNode{val, nil}
		} else {
			newNode := &ListNode{val, L.head}
			L.head = newNode
		}	
	}

	func main() {
		L := &List{nil}
		L.Add(5)
		L.Add(4)
		L.Add(3)
		L.Add(2)
		L.Add(1)
		k := 2
		fmt.Println(solve(L, k))
	}

	func solve(L *List, k int) int {
		// 当p, q都指向头节点, q是倒数第一个节点
		p, q := L.head, L.head
		k --
		for k > 0 {
			q = q.next
			if q == nil {
				return -1
			}
			k--
		}
		for q.next != nil {
			p, q = p.next, q.next
		}
		return p.val
	}
  #+END_SRC

  #+RESULTS:
  : 4
* 链表中环的入口节点

  #+ATTR_HTML: :width 720px
  [[./small_large_step.png]]
  
  #+BEGIN_SRC go
	package main

	import "fmt"

	type ListNode struct {
		val int
		next *ListNode
	}

	type List struct {
		head *ListNode
	}

	func (L *List)Add(val int) {
		if L.head == nil {
			L.head = &ListNode{val, nil}
		} else {
			newNode := &ListNode{val, L.head}
			L.head = newNode		
		}
	}

	func main() {
		L := &List{nil}
		L.Add(1)
		L.Add(2)
		L.Add(3)
		L.Add(4)
		L.Add(5)
		L.Add(6)
		L.Add(7)
		i := L.head
		for i.next != nil {
			i = i.next		
		}
		j := L.head
		for j.val != 5 {
			j = j.next
		}
		i.next  = j
		fmt.Println(solve(L).val)
	}

	func solve(L *List) *ListNode {
		p, q := L.head, L.head
		k := 0 
		for k == 0 || p != q {
			p = p.next
			q = q.next.next
			k++
		}
		t := L.head
		for t!=q {
			t = t.next
			q = q.next
		}
		return t
	}
  #+END_SRC

  #+RESULTS:
  : 5
* 正则表达式匹配

  玩不来...

  #+BEGIN_EXAMPLE
  f[][]: s[0-i]和p[0-j]是否匹配

  // 集合划分: 按p[j]是否为'*'划分为两种情况

  f[0][j] = f[0][j-2] if j >= 2 && p[j] == '*'
  f[i][0] = False
  
  if p[j] != '*': f[i][j] = f[i-1][j-1] && s[i] == p[j]
  if p[j] == '*': f[i][j] = (f[i][j-2] || j >=2 && f[i-1][j-2])
  #+END_EXAMPLE

  #+BEGIN_SRC go
	package main

	import "fmt"

	func main() {
		s := "0aa"
		p := "0aab*"
		fmt.Println(solve(s, p))
	}

	func solve(s, p string) bool {
		n := len(s)
		m := len(p)
		f := make([][]bool, n)
		for i := 0; i < n; i++ {
			f[i] = make([]bool, m)
		}
		f[0][0] = true
		for j:=1; j < m; j++ {
			f[0][j] = j >= 2 && p[j] == '*' && f[0][j-2]
		}
		for i:=1; i < n; i++ {
			for j:=1; j < m; j++ {
				if p[j] != '*' {
					f[i][j] = (s[i] == p[j] || p[j] == '.') && f[i-1][j-1]
				} else {
					f[i][j] = f[i][j-2] || (j >= 2 && f[i-1][j-2])
				}
			}
		}
		return f[n-1][m-1]
	}
  #+END_SRC

  #+RESULTS:
  : true

  
