* 反转链表

  递归版本
  #+BEGIN_SRC go
	package main

	import "fmt"

	type ListNode struct {
		val int
		next *ListNode
	}

	type List struct {
		head *ListNode
	}

	func (L *List)Add(val int) {
		if L.head == nil {
			L.head = &ListNode{val, nil}
		} else { 
			newNode := &ListNode{val, nil}
			i := L.head
			for i.next != nil {
				i = i.next
			}
			i.next = newNode
		}
	}

	func (L *List)AddMany(vals []int) {
		for _, x := range vals {
			L.Add(x)
		}
	}

	func solve(L *List) *List {
		RL := &List{nil}
		dfs(L.head, RL)
		return RL
	}

	func dfs(t *ListNode, RL *List) {
		if t == nil {
			return 
		}
		dfs(t.next, RL) 
		RL.Add(t.val) // 回溯的时候将当前节点加到RL上
	}


	func main() {
		L := &List{nil}
		L.AddMany([]int{1, 2, 3, 4, 5})
		RL := solve(L)
		for i := RL.head; i!=nil; i=i.next {
			fmt.Println(i.val)
		}
	}


  #+END_SRC

  #+RESULTS:
  : 5
  : 4
  : 3
  : 2
  : 1

  
  迭代版本
  #+BEGIN_SRC go :tangle a.go
	package main

	import "fmt"

	type ListNode struct {
		val int
		next *ListNode
	}

	type List struct {
		head *ListNode
	}

	func (L *List)Add(val int) {
		if L.head == nil {
			L.head = &ListNode{val, nil}
		} else { 
			newNode := &ListNode{val, nil}
			i := L.head
			for i.next != nil {
				i = i.next
			}
			i.next = newNode
		}
	}

	func (L *List)AddMany(vals []int) {
		for _, x := range vals {
			L.Add(x)
		}
	}

	func solve(L *List) *List {
		// a->b->c->d
		// 当我们想反转b的节点时, 我们需要a的指针和c的指针, c是为了下一次从何处开始迭代
		// 当c为nil时, 说明b为头节点, 结束迭代
		if L.head.next == nil {
			return &List{L.head}
		} else {
			p, q := L.head, L.head.next
			p.next = nil 
			for {
				v := q.next
				if v == nil { 
					q.next = p 
					return &List{q} 
				} else {
					q.next = p 
					p, q = q, v // next iteration
				}
			}
		}
	}


	func main() {
		L := &List{nil}
		L.AddMany([]int{1, 2, 3, 4, 5})
		RL := solve(L)
		for i := RL.head; i!=nil; i=i.next {
			fmt.Println(i.val)
		}
	}

  #+END_SRC

  #+RESULTS:
  : 5
  : 4
  : 3
  : 2
  : 1
* 合并N个排序的链表

  #+BEGIN_SRC go
	package main

	import "fmt"
	import "container/heap"

	type ListNode struct {
		val int
		next *ListNode
	}

	type List struct {
		head *ListNode
		tail *ListNode
	}

	func (L *List)Add(val int) {
		if L.head == nil {
			L.head = &ListNode{val, nil}
			L.tail = L.head
		} else {
			newNode := &ListNode{val, nil}
			L.tail.next = newNode
			L.tail = newNode
		}	
	}

	func (L *List)AddMany(vals []int) {
		for _, x := range vals {
			L.Add(x)
		}
	}

	type PII struct {
		first int
		second *ListNode
		third idx // idx in ps
	}

	type IntHeap []PII

	func (I IntHeap) Len() int {
		return len(I)
	}

	func (I IntHeap) Swap(i, j int) {
		I[i], I[j] = I[j], I[i]
	}

	func (I IntHeap) Less(i, j int) bool {
		return I[i].first < I[j].first
	}

	func (I *IntHeap) Push(val interface{}) {
		(*I) = append(*I, val.(int))
	}

	func (I *IntHeap) Pop() interface{} {
		t := (*I)[len(*I)-1]
		,*I = (*I)[:len(*I)-1]
		return t
	}

	func main() {
		q := &IntHeap{}
		l1 := &List{nil}
		l1.AddMany([]int{1, 3, 5, 7, 9})
		l2.AddMany([]int{2, 4, 6, 8, 10})
		l3.AddMany([]int{1, 4, 7, 10, 11})
		l4.AddMany([]int{1, 5, 9, 12, 16})
		ls := []*List{l1, l2, l3, l4}
		res := solve(ls)
		for i:=res.head; i!=nil; i=i.next {
			fmt.Println(i.val)
		}
	}

	func solve(ls []*List) *List {
		res := &List{}
		q := &IntHeap{}
		ps := make([]*ListNode, len(ls))
		for i, l := range ls {
			ps[i] = ls[i]
			q.Push(PII{ps[i].val, ps[i]})
		}
		for q.Len() > 0 {
			t := q.Pop()
			res.Add(t.first)
			ps[t.thrid] = t.second.next
			q.Push(PII{ps[i].val, ps[t.third], i})
		}
		return res
	}
  #+END_SRC

  #+RESULTS:
