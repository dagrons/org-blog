#+TITLE: Go Concurrency Patterns: Pipelines and cancellation

本章内容来源： cite:ajmani14:pipeline_and_concellation

* Squaring Numbers  

  #+BEGIN_SRC go
	package main

	import "fmt"

	func gen(nums ...int) <-chan int {
		out := make(chan int)

		go func() {
			for _, x := range nums {
				out <- x
			}
			close(out)
		}()

		return out
	}

	func sq(x <-chan int) <- chan int {
		out := make(chan int)

		go func() {
			for n:= range x {
				out <- n * n
			}
			close(out)
		}()

		return out
	}


	func main() { // main是站在局外人的角度来进行组装stage
		c := gen(2, 3) 
		out := sq(sq(c))	

		fmt.Println(<-out)
		fmt.Println(<-out)
	}
  #+END_SRC

  #+RESULTS:
  : 16
  : 81

  上面的gen()和sq()以及main()都会立即返回，这一点上和js中的Promise写法比较类似，它们都是声明了各个stage之间的依赖关系，不过js使用了Promise的链式表达，而这里使用了channel的依赖表达stage的依赖

  gen -(chan1)-> sq -(chan2)-> sq -(chan3)-> out // 我们可以用->表达直接函数调用，用chan表达channel依赖

  值得注意的是，由于gen的输出目标是chan，因此，gen也会block，因此，为了立即返回chan1, 我们也需要将gen的操作放入的goroutine

  #+BEGIN_SRC javascript
	function sq(x) {
		return new Promise(resolve, reject) {
		resolve(x*x)
		}
	}

	function main() {
		for x of [2, 3] {
		sq(x).
			then(x=>console.log(x))
		}
	}
  #+END_SRC

  当然随着ES6的新标准，我们也不再需要用Promise的链式表达，而可以通过下面的表达

  #+BEGIN_SRC javascript
	function main() {
		async ()=> {
		for x of [2, 3] {
			t = await sq(x) 	 
			console.log(t)
		}
		}()
	}

	function sq(x) {
		return new Promise(resolve, reject) { 
		resolve(x*x)
		}
	}
  #+END_SRC

  在js中，当我们返回Promise时，我们本质上是表达这个返回值不会立即兑现，只有经过一段时间的处理才能返回，如果我们想要在这个返回值返回之后进行相关的操作，我们可以把相关的操作挂在这个Promise上，在上面的
  例子中，我们就是把x=>console.log(x)挂在sq(x)上的

   
  而go中的channel其实可以起到js中的Promise的作用，当我们在一个函数的返回channel时，本质上就是表明这个函数会执行异步操作，什么时候有返回值你不用管，你要是需要它的返回值，你就
  把你的操作挂在这个channel上, 再上面的例子中，我们的sq()依赖gen()的返回值，我们就通过下面的表达来将sq的操作挂在gen返回的channel上，当gen的操作处理完后，sq就会从channel中
  收到返回值，从而进行相关操作

     #+BEGIN_SRC go
	func (n <-chan int) <-chan int{
		out := make(chan int)
		for x := range n {
			return x * x 
		}
		return out
	}

  #+END_SRC

  可以看到，这样的表达是十分好用的，而且go相比js是更加完备的语言，是完全支持多线程和同步机制的，因此借助channel我们能完成更多的事情


* Fan-in, Fan-out   

  在真实场景中，stage之间的依赖更加复杂，并不都是像上述的例子一样都是链式结构，而是呈拓扑状，这是我们就需要处理Fan-in，Fan-out了，即接受多个function的输入，将输出送入多个function
   
  下面我们用merge来处理fan-in, 一方面它从所有channel中读取输入到自己的channel，每读取完一个channel，就wg.Done()一次，直到所有channel都关闭了，才关闭自己channel

  #+BEGIN_SRC go
	func main() {
		c := gen(2, 3)
		sq1 := sq(c)
		sq2 := sq(c)

		for n := range merge(sq1, sq2) {
			fmt.Println(n)
		}
	}

	func merge(cs ...<-chan int) <-chan int {
		var wg WaitGroup // wait all channels being closed
		wg.Add(len(cs))
		out := make(chan int)

		output:= func(x <-chan int) {
			for n := range x {
				out <- n			
			}
			wg.Done()
		}

		for _, c := range cs { // 为每个channel指定一个goroutine处理，当上游关闭channel时，就把信号量-1, 即wg.Done()
			go output(x)
		}

		go func() {
			wg.Wait()
			close(out)
		}()

		return out
	}

  #+END_SRC

  #+RESULTS:   
 
  借助merge，我们就可以实现拓扑结构的stage依赖了


* Stopping Short   

  通过上面的观察，我们发现两个事实

  1. 上游stage在发送完所有数据才关闭channel
  2. 下游stage会一直接受channel中的数据，直到channel被上游stage关闭
	  
  但在实际场景下，我们往往会遇到突发事件，从而需要提前关闭channel，例如，当下游从channel中发现之前stage中产生的error时，或者下游只需要部分输入就完成了任务，而不需要剩下的输入了，
  总之，我们需要一种能从下游通知上游关闭channel的方式，从而防止资源泄漏，

  下面我们来实现下游通知上游关闭channel的方法

  #+BEGIN_SRC dot :file pipeline.png :exports results
	digraph {
		gen[shape=box]    
		sq1[shape=box]
		sq2[shape=box]
		merge[shape=diamond]	
		gen->{sq1, sq2}->merge->output[style="dashed"]
	}

  #+END_SRC

  #+RESULTS:
  [[file:pipeline.png]]

  #+BEGIN_SRC go :tangle a.go
	package main

	import (
		"fmt"
		"sync"
	)

	func gen(done <-chan struct{}, nums ...int) <-chan int {
		out := make(chan int)
		go func() {
			defer close(out)
			for _, x := range nums {
				select {
				case out <- x:
				case <-done:
					return
				}
			}
		}()
		return out
	}

	func sq(done <-chan struct{}, in <-chan int) <-chan int {
		out := make(chan int)

		go func() {
			defer close(out)
			for x := range in {
				select {
				case out <- x * x:
				case <-done:
					return
				}
			}
		}()

		return out
	}

	func merge(done <-chan struct{}, cs ...<-chan int) <-chan int {
		out := make(chan int)

		var wg sync.WaitGroup
		wg.Add(len(cs))

		output := func(c <-chan int) {
			defer close(out) // 注意, close(out)是放在goroutine里执行, 如果放到外面执行会立即关闭channel,产生"close on closed channel"异常
			for x := range c {
				select {
				case out <- x:
				case <-done:
					return
				}
			}
			wg.Done()
		}

		go func() {
			wg.Wait()
			close(out)
		}()

		for _, c := range cs {
			go output(c)
		}

		return out
	}

	func main() {
		done := make(chan struct{})
		defer close(done)
		in := gen(done, 2, 3)
		c1 := sq(done, in) // the call to sq() will return immediately, but the goroutine it creates will not
		c2 := sq(done, in)

		out := merge(done, c1, c2)
		fmt.Println(<-out)
	}
  #+END_SRC 

  #+RESULTS:
  : 9


  在上面的例子中,我们借助了一个事实: 即当done被关闭时,所有挂在它下面的goroutine都会立即收到通知,并且返回值为0, 通过这种方法,我们就实现了我们在下游关闭上游channel的方式

  总结一下上面的内容, 关于channel不难发现有以下几点:
  1. 当上游发送完所有数据后, 关闭channel
  2. 当下游不再需要上游数据后, 通知上游关闭channel

	
  其次,对于goroutine,我们也可以总结如下:
  1. goroutine之间通过channel进行通信, 下游任务把自己挂在上游任务的out channel上
  2. 下游任务通过一个共享done channel来通知所有上游任务, 利用了close(done)会造成所有挂在done上的上游立即接受到zero value返回这一事实

  但同时, 我们也发现, 这样的解决方案存在一个问题, 就是我们需要一个额外的done用于通知每一个所依赖的上游, 这个问题, 我们将在[[file:context.org][Go Concurrency Patterns: Context]]中进行讨论


 bibliography:go.bib 


