#+TITLE: WaitGroup, Cond and Semaphore

参考: cite:geektutu

* WaitGroup

  考虑这样一个场景，一个下游任务同时依赖多个上游事件的发生，即当多个上游事件发生时，下游任务才能进展，这种时候，我们就需要WaitGroup，

  举个例子，如果我们的下游任务y依赖于三个上游事件x1, x2, x3，可以表述成为

  \[
  x1, x2, x3 -> y
  \]

  代码实现如下:

  #+BEGIN_SRC go :tangle wg.go
	package main

	import "sync"
	import "time"
	import "fmt"

	func x1(wg *sync.WaitGroup) {
		go func() {
			time.Sleep(time.Second)
			wg.Done()
		}()
	}

	func x2(wg *sync.WaitGroup) {
		go func() {
			time.Sleep(time.Second * 2)
			wg.Done()
		}()
	}

	func x3(wg *sync.WaitGroup) {	
		go func() {
			time.Sleep(time.Second * 3)
			wg.Done()
		}()
	}

	func y(wg *sync.WaitGroup) {
		go func() {
			wg.Wait()
			fmt.Println("x1, x2 and x3 finished!")
		}()
	}

	func main() {
		var wg sync.WaitGroup
		wg.Add(3)
		x1(&wg)
		x2(&wg)
		x3(&wg)
		y(&wg)
		time.Sleep(time.Second * 5) // wait for output of y
	}
  #+END_SRC

  #+RESULTS:
  : x1, x2 and x3 finished!
 
  再举个例子，我们在实现merge时，需要等待所有上游channel都被关闭后，才关闭自己的out channel，如下：

  #+BEGIN_SRC go
	func merge(cs ...<-chan int) <-chan int {
		var wg WaitGroup // wait all channels being closed
		wg.Add(len(cs))
		out := make(chan int)

		output:= func(x <-chan int) {
			for n := range x {
				out <- n			
			}
			wg.Done()
		}

		for _, c := range cs { // 为每个channel指定一个goroutine处理，当上游关闭channel时，就把信号量-1, 即wg.Done()
			go output(x)
		}

		go func() {
			wg.Wait()
			close(out)
		}()

		return out
	}
  #+END_SRC



* Cond

  如果说WaitGroup是下游任务的进展依赖于多个上游事件的发生，那么Cond就是多个下游任务的进展依赖于一个上游事件的发生

  举个例子, 如果我们的下游任务y1, y2, y3的进展依赖于x的发生, 可以表述为

  \[
  x -> y1, y2, y3
  \]

  代码实现如下:   

  #+BEGIN_SRC go
	package main

	import "fmt"
	import "sync"
	import "time"

	func x(cond *sync.Cond) {
		go func() {
			time.Sleep(time.Second)
			cond.Broadcast()		
		}()
	}

	func y1(cond *sync.Cond) {
		go func() {
			cond.L.Lock()
			defer cond.L.Unlock()
			cond.Wait()
			fmt.Println("y1 finished!")
		}()
	}

	func y2(cond *sync.Cond) {
		go func() {
			cond.L.Lock()
			defer cond.L.Unlock()
			cond.Wait()
			fmt.Println("y2 finished!")
		}()
	}

	func y3(cond *sync.Cond) {
		go func() {
			cond.L.Lock()
			defer cond.L.Unlock()
			cond.Wait()
			fmt.Println("y3 finished!")		
		}()
	}

	func main() {
		cond := sync.NewCond(&sync.Mutex{}) 
		y1(cond)
		y2(cond)
		y3(cond)
		x(cond)
		time.Sleep(time.Second*2) 
	}
  #+END_SRC

  #+RESULTS:
  : y3 finished!
  : y1 finished!
  : y2 finished!

  #+BEGIN_EXPORT HTML
  <span style="background-color:yellow">
  注意,一般以New开头的创建方式返回的都是指针
  </span>
  #+END_EXPORT

* 与Fan-in和Fan-out区别

  Fan-in是指一个goroutine监听多个channel, 而Fan-out是指一个channel被多个goroutine监听, 和这里的依赖关系不同, WaitGroup和Cond都是处理事件级别的依赖的, 
  而事件是人为定义的,人为触发的, 所以和它们相关的Wait,Add,Done,Lock,Wait,Broadcast操作都是被主动调用的, 而channel中的阻塞关系是被动的,是因为下游没接受,
  所以上游阻塞,因为上游没发送,所以下游阻塞
  
  #+BEGIN_EXPORT html
  <p>
  <span style="background-color:yellow">
  总之, channel是面向数据的同步原语, 而sync.WaitGroup和sync.Cond是面向事件的同步原语 
  </span>
  </p>
  <p>
  <span style="background-color:yellow">
  如果把channel默认为"生产者-消费者模式的最佳实现"好像也没问题
  </span>
  </p>
  #+END_EXPORT

* 补充一个,用buffered channel作为信号量控制最大并发数量

  信号量: 每个用户在进入临界区前需要获取一个信号量, 如果信号量不足,就会等待直到信号量被别人放回,用户在出临界区后需要将信号量放回

  或者举个不太好但是非常形象的例子, 一个厕所的坑位是固定的(buffered channel), 我们如果要上厕所, 如果有坑位,就可以直接占用,如果没有坑位,就
  需要等待别人出坑之后才能进入

  #+BEGIN_SRC go
	package main

	import "sync"
	import "time"
	import "fmt"

	func main() {
		var wg sync.WaitGroup // 等待10个routine都处理完才结束
		ch := make(chan struct{}, 3) // 同时只允许三个routine
		for i := 0; i < 10; i++ {
			ch <- struct{}{} // 占坑
			wg.Add(1)
			go func(i int) {
				defer wg.Done()
				fmt.Println(i)
				time.Sleep(time.Second)
				<-ch // 出坑
			}(i)
		}
		wg.Wait()
	}
  #+END_SRC

  #+RESULTS:
  #+begin_example
  2
  0
  1
  5
  4
  3
  8
  6
  7
  9
  #+end_example


* 总结一下

  我们可以这样考虑, 有一场演唱会, 黄牛手上有很多张票, 他的目的就是卖完所有票才能回家, 演唱会内有厕所, 厕所里有5个坑位, 演唱会下午5点开始, 也就说观众5点才能入场

  上述表述中, 黄牛就像是WaitGroup, 一定要等票卖完才回家; 厕所就是值为5的信号量; 而观众在等待"下午5点"这个条件变量.

bibliography:go.bib
